import logging
from fastapi import APIRouter, Depends, Query, HTTPException
from sqlalchemy.orm import Session
from app.config.config import get_settings, Settings
from app.models.mux_models import MuxVideoResponse
from app.services.jwt_service import JWTService
from hax_telegraph.model.database_object.wrapper import DatabaseObjectWrapper
from . import dummy_videos
from app.db import session as db_session, crud, schemas
from app.db.models import Category
from app.api.dependencies import get_current_user  # You need to implement this dependency

router = APIRouter()
logger = logging.getLogger(__name__)

@router.get("/playback", response_model=MuxVideoResponse)
async def get_video_playback(
    video_id: str = Query(None),
    settings: Settings = Depends(get_settings)
):
    jwt_service = JWTService()
    playback_id = video_id 
    playback_token = await jwt_service.create_mux_playback_token(playback_id)
    
    # Construct the complete playback URL
    playback_url = f"https://stream.mux.com/{playback_id}.m3u8?token={playback_token}"
    
    logger.debug(f"Playback URL: {playback_url}")
    print("final")
    print(playback_id, playback_token, playback_url)
    return MuxVideoResponse(
        playback_id=playback_id,
        playback_token=playback_token,
        playback_url=playback_url
    )


@router.get("/dotComContent")
def get_my_videos(
    db: Session = Depends(db_session.get_db),
    current_user: schemas.User = Depends(get_current_user)
):
    """
    Returns all video access records for the current user,
    formatted as a DatabaseObjectWrapper with only necessary fields.
    """
    accesses = crud.get_access_by_user(db, user_id=current_user.id)
    # Extract only the necessary properties for each video
    children = []
    for access in accesses:
        child = {
            "metaTags": {
                "displayTitle": getattr(access, "display_title", "Untitled"),
                "subtitle": getattr(access, "subtitle", ""),
                "date": getattr(access, "date", ""),
                "thumbnailURL": getattr(access, "thumbnail_url", ""),
            },
            "value": getattr(access, "mux_playback_id", None)
        }
        children.append(child)
    return DatabaseObjectWrapper(jsonDict={"children": children})

